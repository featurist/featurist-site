{"version":3,"sources":["webpack:///./src/templates/CaseStudy.jsx"],"names":["ImageList","styled","div","Image","Img","ImageWrapper","props","aspectRatio","Section","children","style","Template","pageContext","prev","next","data","markdownRemark","frontmatter","htmlAst","images","edges","seoDescription","subtitles","join","title","keywords","description","isDark","zIndex","map","subtitle","i","key","condensed","renderMarkdown","length","image","fluidImage","node","childImageSharp","fluid","alt","name","src","imgStyle","objectFit"],"mappings":"4UAqBMA,EAAYC,IAAOC,IAAV,0EAAGD,CAAH,uIAITE,EAAQF,YAAOG,KAAV,sEAAGH,CAAH,MACLI,EAAeJ,IAAOC,IAAV,6EAAGD,CAAH,6GACdE,EADc,mBAQU,SAAAG,GAAK,OAAIA,EAAMC,eAKrCC,EAAU,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACTC,EADkC,iBAClCA,MAER,OACE,kBAAC,IAAD,CAAaA,MAAOA,GAClB,kBAAC,IAAD,KAAoBD,KAKX,SAASE,EAAT,GAA0D,IAAD,IAArCC,YAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAQC,EAAQ,EAARA,KACtDC,EAAmBD,EAAnBC,eACAC,EAAyBD,EAAzBC,YAAaC,EAAYF,EAAZE,QACfC,EAASJ,EAAKI,OAAOC,MACrBC,EAAiBJ,EAAYK,UAC/BL,EAAYK,UAAUC,KAAK,KAC3BN,EAAYO,MAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,MAAOP,EAAYO,MACnBC,SAAUR,EAAYQ,SACtBC,YAAaL,IAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMM,QAAM,EAACjB,MAAO,CAAEkB,OAAQ,KAC5B,kBAAC,IAAD,KAAUX,EAAYO,OACtB,kBAAC,IAAD,KACGP,EAAYK,UACTL,EAAYK,UAAUO,KAAI,SAACC,EAAUC,GAAX,OACxB,kBAAC,IAAD,CAAeC,IAAKD,GAAID,MAE1Bb,EAAYK,YAGpB,kBAACd,EAAD,CAASyB,WAAS,GAAEC,YAAehB,IAClCC,EAAOgB,OAAS,GACf,kBAAC3B,EAAD,CAASE,MAAK,6BACZ,kBAACV,EAAD,KACGmB,EAAOU,KAAI,SAACO,EAAOL,GAClB,IAAMM,EAAaD,EAAME,KAAKC,gBAAgBC,MAE9C,OACE,kBAACnC,EAAD,CACE2B,IAAG,OAASD,EACZxB,YAAa8B,EAAW9B,aAExB,kBAACJ,EAAD,CACEsC,IAAKL,EAAME,KAAKI,KAChBV,IAAKK,EAAWM,IAChBH,MAAOH,EACPO,SAAU,CAAEC,UAAW,mBAQrC,kBAACrC,EAAD,CAASE,MAAK,8DACZ,kBAAC,IAAD,CAAUG,KAAMA,EAAMC,KAAMA","file":"component---src-templates-case-study-jsx-64e276fff9fc614e89fe.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-constant-condition */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/no-danger */\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport tw from \"tailwind.macro\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PrevNext from \"../components/PrevNext\"\nimport AppWrapper from \"../views/AppWrapper\"\nimport { ContentFull } from \"../elements/Content\"\nimport Hero from \"../views/Hero\"\nimport MarkdownContainer from \"../components/MarkdownContainer\"\nimport renderMarkdown from \"../helpers/renderMarkdown\"\n\nimport { H1Light, PLight, WrapTextBlock } from \"../elements/Text\"\n\nconst ImageList = styled.div`\n  ${tw`flex flex-wrap justify-center items-center lg:flex-no-wrap`};\n`\n\nconst Image = styled(Img)``\nconst ImageWrapper = styled.div`\n  ${Image} {\n    ${tw`m-2`};\n\n    width: 320px;\n\n    @media only screen and (min-width: 901px) {\n      max-height: 320px;\n      width: calc(320px * ${props => props.aspectRatio});\n    }\n  }\n`\n\nconst Section = ({ children, ...props }) => {\n  const { style } = props\n\n  return (\n    <ContentFull style={style}>\n      <MarkdownContainer>{children}</MarkdownContainer>\n    </ContentFull>\n  )\n}\n\nexport default function Template({ pageContext: { prev, next }, data }) {\n  const { markdownRemark } = data\n  const { frontmatter, htmlAst } = markdownRemark\n  const images = data.images.edges\n  const seoDescription = frontmatter.subtitles\n    ? frontmatter.subtitles.join(\" \")\n    : frontmatter.title\n  return (\n    <Layout>\n      <SEO\n        title={frontmatter.title}\n        keywords={frontmatter.keywords}\n        description={seoDescription}\n      />\n      <AppWrapper>\n        <Hero isDark style={{ zIndex: 20 }}>\n          <H1Light>{frontmatter.title}</H1Light>\n          <PLight>\n            {frontmatter.subtitles\n              ? frontmatter.subtitles.map((subtitle, i) => (\n                  <WrapTextBlock key={i}>{subtitle}</WrapTextBlock>\n                ))\n              : frontmatter.subtitles}\n          </PLight>\n        </Hero>\n        <Section condensed>{renderMarkdown(htmlAst)}</Section>\n        {images.length > 1 && (\n          <Section style={tw`bg-grey`}>\n            <ImageList>\n              {images.map((image, i) => {\n                const fluidImage = image.node.childImageSharp.fluid\n\n                return (\n                  <ImageWrapper\n                    key={`img-${i}`}\n                    aspectRatio={fluidImage.aspectRatio}\n                  >\n                    <Image\n                      alt={image.node.name}\n                      key={fluidImage.src}\n                      fluid={fluidImage}\n                      imgStyle={{ objectFit: \"contain\" }}\n                    />\n                  </ImageWrapper>\n                )\n              })}\n            </ImageList>\n          </Section>\n        )}\n        <Section style={tw`bg-grey-light px-0`}>\n          <PrevNext prev={prev} next={next} />\n        </Section>\n      </AppWrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!, $absolutePathRegex: String!) {\n    images: allFile(\n      filter: {\n        absolutePath: { regex: $absolutePathRegex }\n        extension: { regex: \"/(jpg)|(png)|(tif)|(tiff)|(webp)|(jpeg)/\" }\n      }\n      sort: { fields: name, order: ASC }\n    ) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 1600, quality: 90) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      htmlAst\n      fields {\n        slug\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        subtitles\n        keywords\n        hidden\n      }\n    }\n  }\n`\n"],"sourceRoot":""}