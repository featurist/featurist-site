{"data":{"markdownRemark":{"html":"<p>So you want a documentation website for your project. You already have a good project README.md, but turning it into website seems like a big and intimidating task. Probably also because building a website is sufficiently different from whatever you are doing on your project. Even - somewhat bizarrely - if your project is related to building websites!</p>\n<p>Anyway, like it often happens with things that seem big and intimidating, it turns out to be not that bad when you get right down to it.</p>\n<p>Building documentation websites is no exception. All it takes is a few good tools put together.</p>\n<h2 id=\"basic-website\"><a href=\"#basic-website\" aria-label=\"basic website permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic website</h2>\n<p>The crown jewel in our toolset is <a href=\"https://docsify.js.org/#/\" target=\"_blank\" rel=\"nofollow\">Docsify</a>. Docsify turns a bunch of markdown files into a beautiful website literally in minutes. There is code highlighting, full text search, themes and more. There is even a <a href=\"https://codefund.io/\" target=\"_blank\" rel=\"nofollow\">codefund</a> plugin to make you rich. But, above all, it just works and it’s easy to use. Follow their <a href=\"https://docsify.js.org/#/quickstart\" target=\"_blank\" rel=\"nofollow\">Quick Start</a> to get going.</p>\n<p>This implies you’ll need to chop the README into some sensible bits. By the end of this exercise, you’ll likely end up with a <code class=\"language-text\">/docs</code> folder containing Docsify’s <code class=\"language-text\">index.html</code>. It’s a static website, serve it locally to test. For example, with <a href=\"https://www.npmjs.com/package/serve\" target=\"_blank\" rel=\"nofollow\">serve</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serve ./docs</code></pre></div>\n<h2 id=\"publishing\"><a href=\"#publishing\" aria-label=\"publishing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publishing</h2>\n<p>There are many ways to host a static website. By far the simplest option is to use <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"nofollow\">GitHub Pages</a>. This way it’s all within GitHub - no need for external tools, accounts, integrations, etc.</p>\n<p>In the repository setting, there is a GitHub Pages section where you need to choose “master branch /docs folder” option and that’s all it takes for <code class=\"language-text\">https://&lt;yourname&gt;.github.io/&lt;yourproject&gt;</code> to get published. Further changes do the <code class=\"language-text\">/docs</code> on master branch will be automatically published too.</p>\n<h2 id=\"runnable-examples\"><a href=\"#runnable-examples\" aria-label=\"runnable examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Runnable examples</h2>\n<p>So far our website looks pretty good. But, let’s face it, it’s little more than a glorified github readme. There’s got to be something more than to justify us pushing users to click an extra link and familiarize themselves with a new ui.</p>\n<p>What that killer feature could be depends on the nature of the project. But if it has anything to do with javascript, then embedding runnable code examples definitely brings the documentation experience onto the whole new level.</p>\n<p>Docsify comes with a plugin for embedding jsfiddle react/vue snippets. But what about other tech? And what if you need more than just snippets?</p>\n<p><a href=\"https://codesandbox.io/\" target=\"_blank\" rel=\"nofollow\">codesandbox</a> is a great online development environment that can also be embedded in an iframe. It’s a perfect fit for showcasing small example projects along side the docs.</p>\n<p>Create a sandbox project, make it work, and then copy an iframe code from the sharing options and paste it into the your markdown. It’ll appear on the docsify website in all its glory.</p>\n<p>This approach works great for a couple of examples, but it does not scale very well. As the number of examples grows, it’ll get harder to keep them all in check and make sure they keep working.</p>\n<p>One well established way to keep code from such deterioration is to use version control. So we should house all example code in the same repo along side the docs. Luckily, codesandbox allows to download the entire project so this gives us a starting point.</p>\n<p>Next step is naturally to make sure codesandbox is using that code for the embedded projects. And - you guessed it - there is a tool for that too: <a href=\"https://github.com/featurist/codesandbox-example-links\" target=\"_blank\" rel=\"nofollow\">codesandbox-example-links</a></p>\n<p>Instead of pasting iframe code in the markdown, we put special markdown links that point to the example project location within the repo. Then <code class=\"language-text\">codesandbox-example-links</code> cli turns those links into actual iframes. For example, given a file <code class=\"language-text\">/docs/doc.md</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Demo</span>\n\n<span class=\"token url\">[codesandbox](/docs/examples/demo)</span></code></pre></div>\n<p>Running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx codesandbox-example-links --iframe --output-dir<span class=\"token operator\">=</span>./dist ./docs/*.md</code></pre></div>\n<p>Will generate this <code class=\"language-text\">/dist/doc.md</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Demo</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://codesandbox.io/api/v1/sandboxes/define?embed=1&amp;parameters=N4IgZglgNgpgziAXKAdAIwIZplATgYyVHwHsA7AFxkqRGAB0yACJ-kAB13hgrjcSYBtRixZtqANzYAaEaLYALAJ7sYuACYkAtmzkBdRgF8Qh6SAhl1MAB4oFFLVCIhSlahVoAeAIQARAPIAwgAqAJoACgCiTPaOAHyMnrFQCcxMSTAY6qmi6RQQFLBx4RgEOEwAyhiWaCTWngD0-YUwOaKeWjwYTPgKpXA8ALxsAKrBAGIAtAAcbEwNbY0KmdmMcp616kptLJ7qEBJMEOrDIBjs7GxxjfsSqXK7cPi4EOwUTHAEp5_4DWi4JAA7gNcA0LFZbAArPgga4NJ4vN6LP4kLapJYOFKMExmdgYfAAawwAHMYChoeRnK4qDREHQ5GwyBhOvxWCBlKoNNpJqSKJM4BRSlR1JMLAUZAyQBI1HAIORWWwAIwoAAMqolaTYVgRr3y8qQbIAEio1JotExfDAtCQmAApCoasQgLQYCwK8yWGx2TGOtk6t4wgQMNJOgVC914spQI6e2zJJiTSYkVRkX1OtAAV2g6gjpXw5Uz2ZjEO9jl0aVMkqsKasZHwEHgrODuTYmGwUEmnG4fI5pu07qgGCoArTbN7XJ0BrYg-HFHLLErmpAVgklpr1HrjYNzfkHDzOEmmcssFwA6H8DnIDki6dBJgSkBJA0gaEBjIhmxphAPz-AOBagac52HJOBrCpcgaQ8OlXAFGITQnJhBiYLgAEcsy4AAKRR4LNNgAEoAG5GBg95gGWKAoBIQxEOQmA0IgTC2BQeEKCUWA4BQfA4BhQi1jIa11AzWAUBsdgn14Gj8EHbimAAQQuJgdy4T1cCYDC8MUh5aIoDNcGYJJFR6aS4EGMicEoww4kNcybTAAFzWNTkzW8JZFTaD930_Mwf3-IEQTBWMQPAtxaRcchYPHM0aNQ9CYCw9kcP7EBeLrcL3nk9horo2L4uYoD8KI1MyEi7QUCA6h1AwzR8AzTpKHQVElGkJgyBgQE5IudSUpxb8CF_PyAIFNj4E47jgsg2hEGJSjMCgDDNiUDSdzACDJjAZloCUAQ2GsqBpXyfBugAORgDMYBkOSXgwKBmrgao4H5NQIDAQqPMYOwbM0tIqGsPkKFwe6VtwLQBAzC41EOgZXs_QxDCAA<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100%<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span> <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span> <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sandbox</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>allow-modals allow-forms allow-popups allow-scripts allow-same-origin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And while we’re at it, there is also another magic link that inserts regular markdown code snippets from example projects. This is to spare copy/pasting bits of example projects into the markdown. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Demo</span>\n\n<span class=\"token url\">[view-code](/docs/examples/demo/file.js#L3-L5)</span></code></pre></div>\n<p>will be produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## Demo\n\n```js\n  // line 3 of file.js\n  // line 4 of file.js\n  // line 5 of file.js\n```</code></pre></div>\n<p>This is pretty exciting, but we’ve just introduced a build step. Github Pages does not have a way to run it for us (unless we add <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"nofollow\">Jekyll</a> into the mix). We could keep both source of and built markdown in the repo. It would only be a matter of time, however, until someone starts editing the built markdown instead of the source one and then it’s all messed up. So let’s not do that.</p>\n<p>In addition to “master branch docs folder”, Github Pages has a couple of other options to look for the source of your website. One of them is “gh-pages branch”. Whatever is in the root of <code class=\"language-text\">gh-pages</code> branch, is going to be served. All we need to do is to run the build step and push the result into the root of <code class=\"language-text\">gh-pages</code> branch. And - you guessed it again - there is a tool that’s doing just that: <a href=\"https://www.npmjs.com/package/gh-pages\" target=\"_blank\" rel=\"nofollow\">gh-pages</a></p>\n<p>For example, the following command will push the contents of <code class=\"language-text\">./dist</code> into the root of <code class=\"language-text\">gh-pages</code> branch:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx gh-pages -t -d ./dist</code></pre></div>\n<p><code class=\"language-text\">-t</code> option tells <code class=\"language-text\">gh-pages</code> to also include dot files. In our case there is an important one not to miss - <code class=\"language-text\">.nojekyll</code>. It tells Github Pages to skip Jekyll build.</p>\n<p>You could have something like this in the <code class=\"language-text\">package.json</code> scripts to automate build and publish steps (assuming both <code class=\"language-text\">codesandbox-example-links</code> and <code class=\"language-text\">gh-pages</code> are added as dependencies):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"build-website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf ./dist &amp;&amp; cp -r ./docs ./dist &amp;&amp; codesandbox-example-links --iframe --output-dir=./dist ./docs/*.md\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"publish-website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build-website &amp;&amp; gh-pages -t -d ./dist\"</span></code></pre></div>\n<p>And that’s all there is to it. We have a beautiful website with runnable examples.</p>\n<p>The approach outlined in this post was used to create <a href=\"https://hyperdom.org\" target=\"_blank\" rel=\"nofollow\">https://hyperdom.org</a>. Check out github sources for further details.</p>","fields":{"slug":"/blog/building-documentation-website/","readingTime":{"text":"5 min read"}},"frontmatter":{"date":"June 07, 2019","title":"Building a documentation website","subtitles":null,"author":"Artem Avetisyan","short_description":"Quickly put together a beautiful documentation website with runnable code examples","hidden":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/building-documentation-website/","prev":{"fileAbsolutePath":"/Users/andreipopa/Work/Featurist/featurist-site-2019/src/data/blog/mithril-vs-hyperdom/index.md","fields":{"slug":"/blog/mithril-vs-hyperdom/"},"frontmatter":{"title":"Mithril vs Hyperdom"}},"next":{"fileAbsolutePath":"/Users/andreipopa/Work/Featurist/featurist-site-2019/src/data/blog/keeping-dependencies-up-to-date/index.md","fields":{"slug":"/blog/keeping-dependencies-up-to-date/"},"frontmatter":{"title":"Keeping node dependencies up to date"}}}}