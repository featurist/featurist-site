{"data":{"markdownRemark":{"html":"<p>In the pre <code class=\"language-text\">yarn.lock</code>/<code class=\"language-text\">package-lock.json</code> era there was only one way to make sure your project does not break tomorrow because of some dependency library introducing a breaking change: setting <em>precise</em> package versions in <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.17.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sqlite3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.0.8\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"left-pad\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>There was a glaring problem there however: nothing guaranteed that the dependencies of dependencies wouldn’t move on. Every fresh <code class=\"language-text\">npm install</code> - for example when the project is deployed to production - could potentially break. Those were shady times, for the brave to venture.</p>\n<p>Now that there is yarn and <code class=\"language-text\">package-lock.json</code> things have finally settled with all versions - not just the explicit dependencies - locked down. As a side effect, there is not much point in keeping versions specified in <code class=\"language-text\">package.json</code>. Indeed, once you add a dependency its version is looked up in the lock file and lock file only. We might as well just set all dependency versions to <code class=\"language-text\">latest</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sqlite3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"left-pad\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>As the time goes on you keep updating dependencies. You should do anyway. Upgrading everything to latest might break things and sometimes those things are easy to fix. Other times - not so much. And sometimes latest versions introduce bugs that you simply can not do anything about.</p>\n<p>So you might choose not to upgrade <em>some</em> dependencies. And this is the time to go back and swap the <code class=\"language-text\">latest</code> on those packages - remember we’ve set all version to <code class=\"language-text\">latest</code> - to whatever version that was known to work.</p>\n<p>The above approach, if applied routinely, will leave you with <code class=\"language-text\">package.json</code> where most of the versions are set to <code class=\"language-text\">latest</code> with may be a handful more strict ones:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sqlite3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"left-pad\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has benefits:</p>\n<ul>\n<li><code class=\"language-text\">yarn upgrade</code> does not upgrade strict versions. So it can be run often without touching the troublesome ones.</li>\n<li>offending packages are visible at a glance in <code class=\"language-text\">package.json</code></li>\n<li><code class=\"language-text\">git blame</code> on the line with a specific version reveals a commit with any details of why upgrading this package was problematic (e.g. link to github issue). This is a nice workaround for the lack of comments in <code class=\"language-text\">package.json</code>.</li>\n</ul>\n<p><strong>UPDATE</strong></p>\n<p>As pointed out by Aslak Hellesøy in the comments, this approach only works for applications, and not for libraries as 3rd party library’s package-lock.json is not honoured.</p>","fields":{"slug":"/blog/keeping-dependencies-up-to-date/"},"frontmatter":{"date":"June 04, 2019","title":"Keeping node dependencies up to date","subtitles":null,"author":"Artem Avetisyan","short_description":"Making node dependencies upgrade less of a PITA","hidden":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/keeping-dependencies-up-to-date/","prev":{"fileAbsolutePath":"/home/artem/projects/featurist-site-2019/src/data/blog/building-documentation-website/index.md","fields":{"slug":"/blog/building-documentation-website/"},"frontmatter":{"title":"Building a documentation website"}},"next":null}}