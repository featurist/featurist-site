(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{183:function(e,t,n){"use strict";n.r(t);var a=n(20),o=n.n(a),r=n(0),i=n.n(r),s=n(187),l=n(197),c=n(193),d=n(194),h=n(188),u=n(191),m=n(195),p=n(190),f=n(189),g=Object(s.c)(h.a).withConfig({displayName:"ttc__SectionWrapper",componentId:"sc-1xl38xo-0"})(["",""],{paddingTop:"3rem",paddingBottom:"3rem"}),w=s.c.div.withConfig({displayName:"ttc__CloseWrapper",componentId:"sc-1xl38xo-1"})(["",";right:2%;top:2%;"],{"@media (min-width: 600px)":{position:"absolute"}}),y=function(e){var t=e.children,n=o()(e,["children"]),a=n.title,r=n.style;return i.a.createElement(h.b,{style:r},i.a.createElement(g,null,i.a.createElement(h.c,null,i.a.createElement(f.c,null,a),t)))};t.default=function(){return i.a.createElement(l.a,null,i.a.createElement(c.a,{title:"TTC"}),i.a.createElement(d.a,null,i.a.createElement(m.a,{isDark:!0},i.a.createElement(w,{style:{opacity:0}},i.a.createElement(u.a,{href:"/"},i.a.createElement(p.a,null))),i.a.createElement(f.b,{style:{opacity:0}},"the ",i.a.createElement(f.e,null,"Travel")," Corporation"),i.a.createElement(f.g,{style:{opacity:0}},i.a.createElement(f.l,null,"The Travel Corporation is comprised of many well known brands such as Contiki Holidays, Trafalgar Tours,")," ","Insight Vacations among many others and runs guided tours, hotels and independent travel solutions.")),i.a.createElement(y,{title:"Background"},i.a.createElement(f.f,null,"Our engagement with The Travel Corporation (TTC) initially set out to generally improve their internal development processes and practices."),i.a.createElement(f.f,null,"This included adoption of AWS as their primary development and production infrastructure. We were quickly introduced to an internal project to improve their consumer facing booking site, known as the"," ",i.a.createElement(f.j,null,"Booking Engine.")," We did this by adopting AngularJS"," ",i.a.createElement("em",null,"(ahem, in 2014)"),", fast end to end browser testing tools and more direct consumer feedback through tracking and surveys."),i.a.createElement(f.h,null,"We were able to rapidly develop and deploy new features with automated continuous integration testing and frequent deployment - practices we have continued to improve on and develop with TTC to this day.")),i.a.createElement(y,{title:"The Problem",style:{backgroundColor:"#f5f6f4"}},i.a.createElement(f.f,null,"Our new Booking Engine was still 100% dependent on the backend servers to compute prices and process bookings. As much as we were able to improve the front-end experience, we were still hampered by the slow performance of the back-end."),i.a.createElement(f.f,null,"We quickly won approval to launch a new project, which we called"," ",i.a.createElement(f.j,null,"Booking Services"),"."),i.a.createElement(f.h,null,"This project recognised that the architecture that had been used and reused in all projects up until then relied on slow internal web services, web services that were not especially efficient for the types of interactions required by website consumers.")),i.a.createElement(y,{title:"Challenges",style:{backgroundColor:"#f5f6f4"}},i.a.createElement(f.f,null,"Customers start their journey by selecting a tour on one of the many brand sites that give customers a wide variety of tours to search and choose from, and once chosen, they land on the Booking Engine. All of TTC's brands use it to guide their consumers and travel agents through the booking experience, for example, allowing them to select how many people are coming with them, whether they want flights or additional sightseeing days either side of their tour, and then to process payment and confirm the bookings."),i.a.createElement(f.h,null,"The project's ambition was to improve the overall performance for our consumers by rethinking the architecture of the back-end, but also to capitalise on our work by building a platform for new features and developments to benefit TTC in the years to come.")),i.a.createElement(y,{title:"Solution"},i.a.createElement(f.f,null,"Our goal with the booking engine was two fold: we wanted to improve the experience of the booking process by optimising the performance of the pricing engine. Prices were normally computed in about 4-5 seconds every time somebody made a change to their booking - this could mean they selected a different hotel bedding configuration, or they added a family member or friend to the booking. Up until this point, all prices had been computed with a combination of SQL queries and Java services. Our insight was that the vast majority of the data used to produce a price changed very rarely, not for months at a time. We simply had to get this pricing data, cache it, and feed it to a new price engine we would write in JavaScript - something that could be executed in the browser."),i.a.createElement(f.f,null,"Writing a new price engine in JavaScript was more ambitious than we had aniticipated. Prices rules for tours included dozens and dozens of rules for discounts, bedding configurations, promotion availability dates, flight discounts. The list went on. We devised an approach that systematically enumerated as many booking configurations we could think of, across as many tours as we could find in the database, and compared the prices generated by the existing system with our own. We logged the booking configurations and prices generated from the systems that were in production. We used this comparative data as a means of identifying missing features and bugs in our price engine, and this list quickly formed part of our backlog."),i.a.createElement(f.f,null,"It took dozens of hard won insights and hundreds of releases, but the vision has panned out and we've all learned a lot in the process. The codebase was covered by hundreds of automated tests that allowed us to add new features without risking a regression."),i.a.createElement(f.f,null,"Now we had a price engine that was written in only a few hundred lines of JavaScript that could generate accurate prices in a browser or on the server in Node.js."),i.a.createElement(f.i,null,i.a.createElement(f.h,null,"It was insanely fast, computing prices in under 10 milliseconds even on mobile devices."),i.a.createElement(f.h,null,"At the same time, the Booking Engine itself was rewritten to take advantage of this new ultra-fast price engine."))),i.a.createElement(y,{title:"Project Impact",style:{backgroundColor:"#f5f6f4"}},i.a.createElement(f.f,null,"It was while we were at TTC that Featurist developed Browser Monkey, a tool that allowed us to test highly interactive browser applications very quickly. We have close to 170,000 lines of JavaScript, including 18,000 lines of JSX - yet our unit- and end-to-end tests run in CI in about 5 minutes on average."),i.a.createElement(f.i,null,i.a.createElement(f.h,null,"One of our main goals was to use automated tests to ensure high code quality and to be able to fix issues and deploy them in only a few hours."),i.a.createElement(f.h,null,"For a company that runs tens of thousands of tours each and every year, being able to quickly generate list prices for those tours was a major development.")))))}},190:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(187),i=r.c.svg.withConfig({displayName:"CloseIcon__Wrapper",componentId:"sc-1empzo8-0"})(["",";width:142px;height:142px;&:hover > circle{stroke-dashoffset:0;}"],{}),s=r.c.circle.withConfig({displayName:"CloseIcon__Circle",componentId:"sc-1empzo8-1"})(["stroke-dasharray:100;stroke-dashoffset:100;transition:stroke-dashoffset 0.35s ease-out;"]);t.a=function(){return o.a.createElement(i,{viewBox:"0 0 24 24"},o.a.createElement(s,{cx:"12",cy:"12",r:"11",fill:"none",stroke:"currentColor",strokeWidth:"0.75"}),o.a.createElement("g",{fill:"none",stroke:"currentColor",strokeWidth:"0.55"},o.a.createElement("path",{d:"M6.643 6.643l10.714 10.714M6.643 17.357L17.357 6.643"})))}}}]);
//# sourceMappingURL=component---src-pages-ttc-jsx-dae09c344bbcdc607175.js.map