{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/file-links-in-terminal/","webpackCompilationHash":"0763b8993eeb5f36f88d","result":{"data":{"markdownRemark":{"html":"<p>I am a web developer working with node and rails. I’ve been using command line as my development environment and terminal vim as the editor of choice for more than ten years. I often pair with other developers and I can compare my experience with that more of a conventional IDE. Some of the terminal ways are clearly better, others are… less better. But there was this one thing missing from my setup, the thing so essential that it had me questioning my choices more than once. Today, after years of searching, I am happy to report that this has been finally put to bed.</p>\n<p>You might be expecting something flashy but it’s actually quite boring. The most useful tricks aren’t the spectacular ones, but rather those we use often. Here is what it is: the IDE guys can click on a line in a stack trace in a terminal and have their editor open that file on that line. Let’s put this into context. Big part of my day is to run tests and investigate their failures. Seamless navigation between tests and code not only saves time, but also encourages to run tests more often. I am not going to dwell on the importance of that - let’s just say it’s really important to me. With that in mind, on to the <em>how</em> this is now possible.</p>\n<h3 id=\"tmux\"><a href=\"#tmux\" aria-label=\"tmux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tmux</h3>\n<p>First let’s talk about <a href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"nofollow\">tmux</a> - as it plays a key part in all this. Tmux - terminal multiplexer - has lots of useful features but one thing that makes it indispensable for me personally is that it keeps terminal windows in <em>sessions</em> and it allows to quickly switch between those sessions. This way I can have multiple projects opened at the same time - each with their own set of terminal windows for shell, vim, rails console, log tail, etc. - and I can switch between them without having to close old terminal windows and open new ones, cd’ing into project directories and so on.</p>\n<p>Another cool thing about tmux is that it is scriptable. You can do basic things like <a href=\"https://github.com/artemave/myrcs/blob/master/bin/tm\" target=\"_blank\" rel=\"nofollow\">create or attach to a named session</a>. Or more advanced stuff like sending kestrokes to a particular tmux window. I’ve used that last one before to implement <a href=\"https://github.com/artemave/vigun\" target=\"_blank\" rel=\"nofollow\">run test under cursor</a> feature. It will also come handy in this case.</p>\n<p>There is nothing new about tmux however. What was missing all that time was something that would allow me to choose an arbitrary text in the terminal, make sure it resolves to an existing file and then pass it into the <code class=\"language-text\">vim</code> window in the form of <code class=\"language-text\">:e +123 /path/to/the/file.txt</code> - that’s vim’s for opening <code class=\"language-text\">file.txt</code> on line 123 - followed by <code class=\"language-text\">Enter</code>.</p>\n<h3 id=\"kitty\"><a href=\"#kitty\" aria-label=\"kitty permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitty</h3>\n<p>I’ve looked into various terminal emulators, but none of them had enough muscle for it (<a href=\"https://gist.github.com/artemave/e68aa6e367f2c65aece6300f44aacb5a\" target=\"_blank\" rel=\"nofollow\">except for iTerm but only for absolute filenames</a>). And then I found <a href=\"https://sw.kovidgoyal.net/kitty/\" target=\"_blank\" rel=\"nofollow\">kitty</a>. Kitty didn’t have what I wanted either, but what it did have was a <a href=\"https://github.com/kovidgoyal\" target=\"_blank\" rel=\"nofollow\">maintainer</a> who, as I was settling in for a long feature discussion on github, just went ahead and <em>did the whole thing</em>. To this day, I am still shocked. In a good way. Oh, and let me also add to this that kitty is an insanely fast modern terminal emulator. Give it a try.</p>\n<p>With the final piece of the puzzle in place, all that was left to be done was to… write a little bit of python. You see, what the kitty maintainer did was to simply expose an interface to plug into the  <a href=\"https://sw.kovidgoyal.net/kitty/kittens/hints.html\" target=\"_blank\" rel=\"nofollow\">hints</a> plugin (or “kitten” as they call it) - a vimperator/vimium like way to “act on arbitrary text snippets currently visible on the screen” (this isn’t techincally <em>clicking</em> links, but who wants to use mouse in the terminal anyway?).</p>\n<p>This provided enough power to do things like checking for file existence before showing “hints” (thus reducing false positives to none). It also unlocked an interesting ability to show “hints” for things that look nothing like files but yet resolve to a file on the file system. For example, <code class=\"language-text\">Admin::PostsController#index</code> in rails log actually resolves to a particular line number in  <code class=\"language-text\">app/controllers/admin/posts_controller.rb</code>.</p>\n<p>Ultimately, any text can be mapped onto any action. So when a text looks like a url, the script feeds it to the system <code class=\"language-text\">open</code> and so the browser pops up navigating to that url. God knows what other interesting mappings can spring out of this. Dates to calendar? Git SHAs to github? Custom actions based on file type? You name it.</p>\n<h3 id=\"all-together-now\"><a href=\"#all-together-now\" aria-label=\"all together now permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>All together now</h3>\n<p>Anyway. This is how you can use it:</p>\n<ul>\n<li><a href=\"https://sw.kovidgoyal.net/kitty/binary.html\" target=\"_blank\" rel=\"nofollow\">get kitty</a> (if installing from OS package manager, make sure the version is 0.15 or greater) </li>\n<li><code class=\"language-text\">wget -P ~/.config/kitty https://raw.githubusercontent.com/artemave/myrcs/master/.config/kitty/mega-hints.py</code></li>\n<li>add the following line <code class=\"language-text\">map kitty_mod+f kitten hints --customize-processing mega-hints.py tmux</code> to <code class=\"language-text\">~/.config/kitty/kitty.conf</code></li>\n</ul>\n<p>That’s it. Assuming your <code class=\"language-text\">kitty_mod</code> is <code class=\"language-text\">Alt</code>, pressing <code class=\"language-text\">Alt-f</code> will highlight all files (and web urls) currently displayed in the terminal. Files will be sent to window named <code class=\"language-text\">vim</code> in the current tmux session. Web urls will be sent to the web browser.</p>\n<p>This is how it looks:</p>\n<div class=\"image-frame\">\n  <div class=\"image-frame-image\"><gif-player gif=\"how-it-works.gif\" /></gif-player></div>\n  <div class=\"image-frame-caption\">How it works</div>\n</div>\n<h3 id=\"bonus---no-tmux-no-vim\"><a href=\"#bonus---no-tmux-no-vim\" aria-label=\"bonus   no tmux no vim permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bonus - no tmux, no vim</h3>\n<p>I showed this to a friend. He said: “sexy”. He also said: “how do I quit vim?” and “what the hell is tmux?“. This got me thinking. Kitty’s “hints” isn’t tied to tmux in any way. Similarly, vim is just a program that can open files. I could simply have “normalised” file paths sent to a user defined command. And so I made few modifications and as a result this is now also possible. Simply swap the <code class=\"language-text\">tmux</code> bit in the above mapping for your editor command - e.g. <code class=\"language-text\">code -g</code> for vscode - and voila.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I am a web developer working with node and rails. I’ve been using command line as my development environment and terminal vim as the editor of choice for more than ten years. I often pair with other developers and I can compare my experience with that more of a conventional IDE. Some of the terminal ways are clearly better, others are… less better. But there was this one thing missing from my setup, the thing so essential that it had me questioning my choices more than once. Today, after years of searching, I am happy to report that this has been finally put to bed."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might be expecting something flashy but it’s actually quite boring. The most useful tricks aren’t the spectacular ones, but rather those we use often. Here is what it is: the IDE guys can click on a line in a stack trace in a terminal and have their editor open that file on that line. Let’s put this into context. Big part of my day is to run tests and investigate their failures. Seamless navigation between tests and code not only saves time, but also encourages to run tests more often. I am not going to dwell on the importance of that - let’s just say it’s really important to me. With that in mind, on to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"how"}]},{"type":"text","value":" this is now possible."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"tmux"},"children":[{"type":"element","tagName":"a","properties":{"href":"#tmux","ariaLabel":"tmux permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Tmux"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First let’s talk about "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/tmux/tmux","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"tmux"}]},{"type":"text","value":" - as it plays a key part in all this. Tmux - terminal multiplexer - has lots of useful features but one thing that makes it indispensable for me personally is that it keeps terminal windows in "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"sessions"}]},{"type":"text","value":" and it allows to quickly switch between those sessions. This way I can have multiple projects opened at the same time - each with their own set of terminal windows for shell, vim, rails console, log tail, etc. - and I can switch between them without having to close old terminal windows and open new ones, cd’ing into project directories and so on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another cool thing about tmux is that it is scriptable. You can do basic things like "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/artemave/myrcs/blob/master/bin/tm","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"create or attach to a named session"}]},{"type":"text","value":". Or more advanced stuff like sending kestrokes to a particular tmux window. I’ve used that last one before to implement "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/artemave/vigun","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"run test under cursor"}]},{"type":"text","value":" feature. It will also come handy in this case."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is nothing new about tmux however. What was missing all that time was something that would allow me to choose an arbitrary text in the terminal, make sure it resolves to an existing file and then pass it into the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"vim"}]},{"type":"text","value":" window in the form of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":":e +123 /path/to/the/file.txt"}]},{"type":"text","value":" - that’s vim’s for opening "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"file.txt"}]},{"type":"text","value":" on line 123 - followed by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Enter"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"kitty"},"children":[{"type":"element","tagName":"a","properties":{"href":"#kitty","ariaLabel":"kitty permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Kitty"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I’ve looked into various terminal emulators, but none of them had enough muscle for it ("},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/artemave/e68aa6e367f2c65aece6300f44aacb5a","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"except for iTerm but only for absolute filenames"}]},{"type":"text","value":"). And then I found "},{"type":"element","tagName":"a","properties":{"href":"https://sw.kovidgoyal.net/kitty/","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"kitty"}]},{"type":"text","value":". Kitty didn’t have what I wanted either, but what it did have was a "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/kovidgoyal","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"maintainer"}]},{"type":"text","value":" who, as I was settling in for a long feature discussion on github, just went ahead and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"did the whole thing"}]},{"type":"text","value":". To this day, I am still shocked. In a good way. Oh, and let me also add to this that kitty is an insanely fast modern terminal emulator. Give it a try."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the final piece of the puzzle in place, all that was left to be done was to… write a little bit of python. You see, what the kitty maintainer did was to simply expose an interface to plug into the  "},{"type":"element","tagName":"a","properties":{"href":"https://sw.kovidgoyal.net/kitty/kittens/hints.html","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"hints"}]},{"type":"text","value":" plugin (or “kitten” as they call it) - a vimperator/vimium like way to “act on arbitrary text snippets currently visible on the screen” (this isn’t techincally "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"clicking"}]},{"type":"text","value":" links, but who wants to use mouse in the terminal anyway?)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This provided enough power to do things like checking for file existence before showing “hints” (thus reducing false positives to none). It also unlocked an interesting ability to show “hints” for things that look nothing like files but yet resolve to a file on the file system. For example, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Admin::PostsController#index"}]},{"type":"text","value":" in rails log actually resolves to a particular line number in  "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"app/controllers/admin/posts_controller.rb"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ultimately, any text can be mapped onto any action. So when a text looks like a url, the script feeds it to the system "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"open"}]},{"type":"text","value":" and so the browser pops up navigating to that url. God knows what other interesting mappings can spring out of this. Dates to calendar? Git SHAs to github? Custom actions based on file type? You name it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"all-together-now"},"children":[{"type":"element","tagName":"a","properties":{"href":"#all-together-now","ariaLabel":"all together now permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"All together now"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Anyway. This is how you can use it:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://sw.kovidgoyal.net/kitty/binary.html","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"get kitty"}]},{"type":"text","value":" (if installing from OS package manager, make sure the version is 0.15 or greater) "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"wget -P ~/.config/kitty https://raw.githubusercontent.com/artemave/myrcs/master/.config/kitty/mega-hints.py"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"add the following line "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"map kitty_mod+f kitten hints --customize-processing mega-hints.py tmux"}]},{"type":"text","value":" to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"~/.config/kitty/kitty.conf"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That’s it. Assuming your "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"kitty_mod"}]},{"type":"text","value":" is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Alt"}]},{"type":"text","value":", pressing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Alt-f"}]},{"type":"text","value":" will highlight all files (and web urls) currently displayed in the terminal. Files will be sent to window named "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"vim"}]},{"type":"text","value":" in the current tmux session. Web urls will be sent to the web browser."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is how it looks:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["image-frame"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tagName":"div","properties":{"className":["image-frame-image"]},"children":[{"type":"element","tagName":"gif-player","properties":{"gif":"how-it-works.gif"},"children":[]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"div","properties":{"className":["image-frame-caption"]},"children":[{"type":"text","value":"How it works"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"bonus---no-tmux-no-vim"},"children":[{"type":"element","tagName":"a","properties":{"href":"#bonus---no-tmux-no-vim","ariaLabel":"bonus   no tmux no vim permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Bonus - no tmux, no vim"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I showed this to a friend. He said: “sexy”. He also said: “how do I quit vim?” and “what the hell is tmux?“. This got me thinking. Kitty’s “hints” isn’t tied to tmux in any way. Similarly, vim is just a program that can open files. I could simply have “normalised” file paths sent to a user defined command. And so I made few modifications and as a result this is now also possible. Simply swap the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tmux"}]},{"type":"text","value":" bit in the above mapping for your editor command - e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"code -g"}]},{"type":"text","value":" for vscode - and voila."}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li><a href=\"/blog/file-links-in-terminal/#tmux\">Tmux</a></li>\n<li><a href=\"/blog/file-links-in-terminal/#kitty\">Kitty</a></li>\n<li><a href=\"/blog/file-links-in-terminal/#all-together-now\">All together now</a></li>\n<li><a href=\"/blog/file-links-in-terminal/#bonus---no-tmux-no-vim\">Bonus - no tmux, no vim</a></li>\n</ul>","fields":{"slug":"/blog/file-links-in-terminal/","readingTime":{"text":"5 min read"}},"frontmatter":{"date":"January 10, 2020","title":"File Links in the Terminal","subtitles":null,"author":"Artem Avetisyan","short_description":"Open file links in the terminal","hidden":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/file-links-in-terminal/","prev":{"fileAbsolutePath":"/home/artem/projects/featurist-site-2019/src/data/blog/progressive-enhancement-in-rails/index.md","fields":{"slug":"/blog/progressive-enhancement-in-rails/"},"frontmatter":{"title":"Progressive Enhancement in Rails: why and how"}},"next":{"fileAbsolutePath":"/home/artem/projects/featurist-site-2019/src/data/blog/eks/index.md","fields":{"slug":"/blog/eks/"},"frontmatter":{"title":"Using EKS to Deploy all the Pull Requests"}}}}}