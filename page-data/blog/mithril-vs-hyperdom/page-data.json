{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/mithril-vs-hyperdom/","webpackCompilationHash":"0763b8993eeb5f36f88d","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://mithril.js.org/\" target=\"_blank\" rel=\"nofollow\">Mithril</a> is a ‚ÄúA modern client-side Javascript framework for building Single Page Applications‚Äù. So are many other frameworks out there. So is my personal favorite - <a href=\"http://hyperdom.org/\" target=\"_blank\" rel=\"nofollow\">Hyperdom</a>. What sets Mithril apart from the some other frameworks that I looked into is just how similar it is to Hyperdom in terms of development experience.</p>\n<p>This is because they are based on similar programming ideas: ‚Äúcomponent lifecycle is <em>not</em> managed by the framework (that is, components are not recreated on each render)‚Äù and ‚Äúautomatically redraw all components on some common events‚Äù.</p>\n<p>In practice, that means that there is no reason for the framework to manage application state. State can be simply stored in plain javascript objects that have nothing to do with the framework. If you‚Äôre familiar with React, imagine you could write <code class=\"language-text\">state.foo = &#39;bar&#39;</code> (<code class=\"language-text\">state</code> being some global javascript object) instead of <code class=\"language-text\">this.setState({foo: &#39;bar&#39;})</code> and <code class=\"language-text\">bar</code> will still show up in the DOM. Even if <code class=\"language-text\">state.foo</code> is referenced from other components, they will all pick up the change and update their views.</p>\n<p>In other words, both Mithril and Hyperdom are compatible with the ultimate state management solution:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">my js state management library: {}</p>&mdash; TJ Holowaychuk üôÉ (@tjholowaychuk) <a href=\"https://twitter.com/tjholowaychuk/status/957853652483416064?ref_src=twsrc%5Etfw\">January 29, 2018</a></blockquote>\n<br/>\n<br/>\n<p>To get a real taste for it, I made a small app in both technologies and they look strikingly similar. You can play with both of them on codesandbox: <a href=\"https://codesandbox.io/s/beer-app-mithril-cy0z6\" target=\"_blank\" rel=\"nofollow\">mithril beer app</a> and <a href=\"https://codesandbox.io/s/beer-app-hyperdom-phbf5\" target=\"_blank\" rel=\"nofollow\">hyperdom beer app</a></p>\n<p>The project, albeit small, covers the following key points:</p>\n<ul>\n<li>routing</li>\n<li>state</li>\n<li>xhr</li>\n<li>input binding</li>\n<li>layout</li>\n<li>components composition</li>\n</ul>\n<p>As mentioned above, the result was similar, but there were of course differences and the rest of this post will go over those that I managed to spot.</p>\n<p><em>Disclaimer: I know Hyperdom reasonably well but I was using Mithril for the first time. It‚Äôs possible that some of the comparison below is unfair/incorrect.</em></p>\n<h2 id=\"automatic-redrawing\"><a href=\"#automatic-redrawing\" aria-label=\"automatic redrawing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automatic redrawing</h2>\n<p>As mentioned above, both Hyperdom and Mithril feature automatic rerender of the entire component tree after certain common events. These are:</p>\n<ul>\n<li>bound input change</li>\n<li>onclick event handler</li>\n<li>navigation</li>\n<li>xhr response</li>\n</ul>\n<p>While first three work identically in both frameworks, the last one differs a bit.</p>\n<p>Hyperdom doesn‚Äôt actually do anything special on xhr, it simply triggers another render if an event handler happens to return a promise. So long as you‚Äôre using a promise based http client (or fetch api), it will naturally redraw after request is finished.</p>\n<p>Mithril doesn‚Äôt have this special treatment of promises, instead it provides its own http client. Beside the ‚ÄúI have to learn the Mithril way of making xhr requests‚Äù, there are couple of other problems here. Consider this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">oninit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      method<span class=\"token punctuation\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.punkapi.com/v2/beers\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beers <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mithril is going to render after <code class=\"language-text\">then</code> is executed.</p>\n<p>It‚Äôs 2019, the immediate urge is to rewrite that code using async/await:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">async</span> <span class=\"token function\">oninit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      method<span class=\"token punctuation\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://api.punkapi.com/v2/beers\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>But, alas, that does not work. I don‚Äôt know why.</p>\n<p><em>UPDATE: this is apparently fixed in the upcoming v2 release (<a href=\"https://www.reddit.com/r/programming/comments/ccb7fg/mithril_vs_hyperdom/etlvl7m\" target=\"_blank\" rel=\"nofollow\">source</a>)</em></p>\n<p>Another thing with the custom http client: what if I am not using Rest API? What about Graphql? I didn‚Äôt find any Mithril Graphql clients that hook into autoredraw. Of course one can always call <code class=\"language-text\">m.redraw()</code> manually, but that‚Äôs not ideal.</p>\n<h3 id=\"opting-out-of-autoredraw\"><a href=\"#opting-out-of-autoredraw\" aria-label=\"opting out of autoredraw permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opting out of Autoredraw</h3>\n<p>Both Mithril and Hyperdom allow components to opt out of autoredraw framework. Mithril way is to mount component using <code class=\"language-text\">m.render</code> rather than <code class=\"language-text\">m.mount</code>/<code class=\"language-text\">m.route</code>. Since only top level component/routes are mounted, it was not clear to me how to opt out of autoredraw in some leaf component.</p>\n<p><em>UPDATE: This has been clarified by a redditor in <a href=\"https://www.reddit.com/r/programming/comments/ccb7fg/mithril_vs_hyperdom/etlvl7m\" target=\"_blank\" rel=\"nofollow\">this comment</a></em></p>\n<p>Hyperdom requires you to return <code class=\"language-text\">hyperdom.norefresh()</code> from an event handler to signal the opt out, so cancelling autoredraw on a case by case basis seems straightforward. There is also caching and the ability to take over the entire redraw control with <code class=\"language-text\">refreshify</code>.</p>\n<h2 id=\"routing\"><a href=\"#routing\" aria-label=\"routing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing</h2>\n<p>Mithril routes are defined at the time the application is mounted. As a result all routes are listed in one place which is nice. Hyperdom on the other hand allows each component to specify which routes it wants to handle (the example projects reflects this well). This makes it harder to see ‚Äúrouting table‚Äù at a glance. I guess I‚Äôd prefer if it was more like Mithril (however, I haven‚Äôt used it in anger - there may be implications/restrictions that are not obvious from where I stand).</p>\n<h3 id=\"links\"><a href=\"#links\" aria-label=\"links permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links</h3>\n<p>Hyperdom intercepts any link and checks if it matches any route. Mithril requires you to explicitly turn a link into the one handled by router. I prefer the Hyperdom way - it‚Äôs just one less thing to remember.</p>\n<h3 id=\"url-params-binding\"><a href=\"#url-params-binding\" aria-label=\"url params binding permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL params binding</h3>\n<p>Hyperdom allows to bind URL query params onto the state much like an input binding. E.g., a user types into an input and the framework renders it in the DOM <em>and</em> in the URL. I haven‚Äôt found a way to achieve that in Mithril.</p>\n<h3 id=\"in-memory-router\"><a href=\"#in-memory-router\" aria-label=\"in memory router permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In-memory router</h3>\n<p>Hyperdom comes with an in-memory router implementation that can be used in tests. I haven‚Äôt found a similar thing in Mithril.</p>\n<h2 id=\"components-composition\"><a href=\"#components-composition\" aria-label=\"components composition permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components composition</h2>\n<p>Hyperdom does not impose any frameworky stuff onto how components are instantiated. Any javascript object with <code class=\"language-text\">render</code>/<code class=\"language-text\">routes</code> method can act as one. So creating components is no different from any other javascript object - just call a <code class=\"language-text\">new</code> on a class. Object literals are just as good.</p>\n<p>Mithril instantiates components for you. That wouldn‚Äôt be worth mentioning if not for the fact that when you need to pass something from parent component to a child component, you need to figure out how to do it the Mithril way, rather than just using javascript you already know.</p>\n<p>In code, the difference looks like this:</p>\n<p>Hyperdom:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Thing</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>stuff<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stuff <span class=\"token operator\">=</span> stuff\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>stuff<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Mithril:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Thing</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">oninit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// or any other lifecycle method</span>\n    <span class=\"token keyword\">const</span> stuff <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">.</span>stuff\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">m</span><span class=\"token punctuation\">(</span>Thing<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>stuff<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>On my toy project, that was merely a flavor difference, past the fact that I had to learn how to do this in Mithril.</p>\n<h2 id=\"performance\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h2>\n<p>Performance is a broad subject, but there is one aspect of it that I was particularly curious about - multiple DOM updates. Why is that interesting? For fast browser tests. Tests can click links and type into inputs extremely fast and if each of those events causes a DOM update, then it better be fast.</p>\n<p>To get an answer to this question, I made another <a href=\"https://github.com/artemave/render-performance-compare\" target=\"_blank\" rel=\"nofollow\">little project</a> that runs a simple test for the same app implemented in both frameworks. The test types in 4000 characters into an input. Input value is bound onto a div. The test is complete once all 4000 characters show up in that div.</p>\n<p>After running this test a few times, Mithril came out a winner, albeit by a small margin.</p>\n<p>I also couldn‚Äôt help but include React into the comparison and, on that particular test, it scores ten times slower then either Mithril or Hyperdom!</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>This is by no means an exhaustive comparison. But, surely, the only one that exists in the observable universe - so there you go ;)</p>\n<p>I haven‚Äôt encountered any killer features of Mithril over Hyperdom. So, as someone who is already familiar with Hyperdom, I‚Äôd stick to it. Having said that, bar some minor issues, Mithril looks solid. Something I‚Äôd chose over React any day.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://mithril.js.org/","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"Mithril"}]},{"type":"text","value":" is a ‚ÄúA modern client-side Javascript framework for building Single Page Applications‚Äù. So are many other frameworks out there. So is my personal favorite - "},{"type":"element","tagName":"a","properties":{"href":"http://hyperdom.org/","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"Hyperdom"}]},{"type":"text","value":". What sets Mithril apart from the some other frameworks that I looked into is just how similar it is to Hyperdom in terms of development experience."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because they are based on similar programming ideas: ‚Äúcomponent lifecycle is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" managed by the framework (that is, components are not recreated on each render)‚Äù and ‚Äúautomatically redraw all components on some common events‚Äù."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In practice, that means that there is no reason for the framework to manage application state. State can be simply stored in plain javascript objects that have nothing to do with the framework. If you‚Äôre familiar with React, imagine you could write "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"state.foo = 'bar'"}]},{"type":"text","value":" ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"state"}]},{"type":"text","value":" being some global javascript object) instead of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this.setState({foo: 'bar'})"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bar"}]},{"type":"text","value":" will still show up in the DOM. Even if "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"state.foo"}]},{"type":"text","value":" is referenced from other components, they will all pick up the change and update their views."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In other words, both Mithril and Hyperdom are compatible with the ultimate state management solution:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{"className":["twitter-tweet"],"dataLang":"en"},"children":[{"type":"element","tagName":"p","properties":{"lang":"en","dir":"ltr"},"children":[{"type":"text","value":"my js state management library: {}"}]},{"type":"text","value":"‚Äî TJ Holowaychuk üôÉ (@tjholowaychuk) "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/tjholowaychuk/status/957853652483416064?ref_src=twsrc%5Etfw"},"children":[{"type":"text","value":"January 29, 2018"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To get a real taste for it, I made a small app in both technologies and they look strikingly similar. You can play with both of them on codesandbox: "},{"type":"element","tagName":"a","properties":{"href":"https://codesandbox.io/s/beer-app-mithril-cy0z6","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"mithril beer app"}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"https://codesandbox.io/s/beer-app-hyperdom-phbf5","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"hyperdom beer app"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The project, albeit small, covers the following key points:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"routing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"state"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"xhr"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"input binding"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"layout"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"components composition"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As mentioned above, the result was similar, but there were of course differences and the rest of this post will go over those that I managed to spot."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Disclaimer: I know Hyperdom reasonably well but I was using Mithril for the first time. It‚Äôs possible that some of the comparison below is unfair/incorrect."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"automatic-redrawing"},"children":[{"type":"element","tagName":"a","properties":{"href":"#automatic-redrawing","ariaLabel":"automatic redrawing permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Automatic redrawing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As mentioned above, both Hyperdom and Mithril feature automatic rerender of the entire component tree after certain common events. These are:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"bound input change"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"onclick event handler"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"navigation"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"xhr response"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While first three work identically in both frameworks, the last one differs a bit."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom doesn‚Äôt actually do anything special on xhr, it simply triggers another render if an event handler happens to return a promise. So long as you‚Äôre using a promise based http client (or fetch api), it will naturally redraw after request is finished."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mithril doesn‚Äôt have this special treatment of promises, instead it provides its own http client. Beside the ‚ÄúI have to learn the Mithril way of making xhr requests‚Äù, there are couple of other problems here. Consider this code:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"javascript"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"  "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"oninit"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"vnode"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    m"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"request"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      method"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'GET'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n      url"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"https://api.punkapi.com/v2/beers\""}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"then"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"beers "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" data\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mithril is going to render after "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" is executed."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It‚Äôs 2019, the immediate urge is to rewrite that code using async/await:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"javascript"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"async"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"oninit"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"vnode"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"beers "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"await"}]},{"type":"text","value":" m"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"request"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      method"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'GET'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n      url"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"https://api.punkapi.com/v2/beers\""}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But, alas, that does not work. I don‚Äôt know why."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"UPDATE: this is apparently fixed in the upcoming v2 release ("},{"type":"element","tagName":"a","properties":{"href":"https://www.reddit.com/r/programming/comments/ccb7fg/mithril_vs_hyperdom/etlvl7m","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"source"}]},{"type":"text","value":")"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another thing with the custom http client: what if I am not using Rest API? What about Graphql? I didn‚Äôt find any Mithril Graphql clients that hook into autoredraw. Of course one can always call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"m.redraw()"}]},{"type":"text","value":" manually, but that‚Äôs not ideal."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"opting-out-of-autoredraw"},"children":[{"type":"element","tagName":"a","properties":{"href":"#opting-out-of-autoredraw","ariaLabel":"opting out of autoredraw permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Opting out of Autoredraw"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Both Mithril and Hyperdom allow components to opt out of autoredraw framework. Mithril way is to mount component using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"m.render"}]},{"type":"text","value":" rather than "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"m.mount"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"m.route"}]},{"type":"text","value":". Since only top level component/routes are mounted, it was not clear to me how to opt out of autoredraw in some leaf component."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"UPDATE: This has been clarified by a redditor in "},{"type":"element","tagName":"a","properties":{"href":"https://www.reddit.com/r/programming/comments/ccb7fg/mithril_vs_hyperdom/etlvl7m","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"this comment"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom requires you to return "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hyperdom.norefresh()"}]},{"type":"text","value":" from an event handler to signal the opt out, so cancelling autoredraw on a case by case basis seems straightforward. There is also caching and the ability to take over the entire redraw control with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"refreshify"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"routing"},"children":[{"type":"element","tagName":"a","properties":{"href":"#routing","ariaLabel":"routing permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Routing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mithril routes are defined at the time the application is mounted. As a result all routes are listed in one place which is nice. Hyperdom on the other hand allows each component to specify which routes it wants to handle (the example projects reflects this well). This makes it harder to see ‚Äúrouting table‚Äù at a glance. I guess I‚Äôd prefer if it was more like Mithril (however, I haven‚Äôt used it in anger - there may be implications/restrictions that are not obvious from where I stand)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"links"},"children":[{"type":"element","tagName":"a","properties":{"href":"#links","ariaLabel":"links permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Links"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom intercepts any link and checks if it matches any route. Mithril requires you to explicitly turn a link into the one handled by router. I prefer the Hyperdom way - it‚Äôs just one less thing to remember."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"url-params-binding"},"children":[{"type":"element","tagName":"a","properties":{"href":"#url-params-binding","ariaLabel":"url params binding permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"URL params binding"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom allows to bind URL query params onto the state much like an input binding. E.g., a user types into an input and the framework renders it in the DOM "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"and"}]},{"type":"text","value":" in the URL. I haven‚Äôt found a way to achieve that in Mithril."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"in-memory-router"},"children":[{"type":"element","tagName":"a","properties":{"href":"#in-memory-router","ariaLabel":"in memory router permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"In-memory router"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom comes with an in-memory router implementation that can be used in tests. I haven‚Äôt found a similar thing in Mithril."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"components-composition"},"children":[{"type":"element","tagName":"a","properties":{"href":"#components-composition","ariaLabel":"components composition permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Components composition"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom does not impose any frameworky stuff onto how components are instantiated. Any javascript object with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"render"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"routes"}]},{"type":"text","value":" method can act as one. So creating components is no different from any other javascript object - just call a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" on a class. Object literals are just as good."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mithril instantiates components for you. That wouldn‚Äôt be worth mentioning if not for the fact that when you need to pass something from parent component to a child component, you need to figure out how to do it the Mithril way, rather than just using javascript you already know."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In code, the difference looks like this:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hyperdom:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"javascript"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Thing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"constructor"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"stuff"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"stuff "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" stuff\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"h"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Thing"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"stuff"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mithril:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"javascript"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Thing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"oninit"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"vnode"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// or any other lifecycle method"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" stuff "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" vnode"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"attrs"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"stuff\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"m"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"Thing"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"stuff"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On my toy project, that was merely a flavor difference, past the fact that I had to learn how to do this in Mithril."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"performance"},"children":[{"type":"element","tagName":"a","properties":{"href":"#performance","ariaLabel":"performance permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Performance"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Performance is a broad subject, but there is one aspect of it that I was particularly curious about - multiple DOM updates. Why is that interesting? For fast browser tests. Tests can click links and type into inputs extremely fast and if each of those events causes a DOM update, then it better be fast."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To get an answer to this question, I made another "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/artemave/render-performance-compare","target":"_blank","rel":["nofollow"]},"children":[{"type":"text","value":"little project"}]},{"type":"text","value":" that runs a simple test for the same app implemented in both frameworks. The test types in 4000 characters into an input. Input value is bound onto a div. The test is complete once all 4000 characters show up in that div."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After running this test a few times, Mithril came out a winner, albeit by a small margin."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I also couldn‚Äôt help but include React into the comparison and, on that particular test, it scores ten times slower then either Mithril or Hyperdom!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"conclusion"},"children":[{"type":"element","tagName":"a","properties":{"href":"#conclusion","ariaLabel":"conclusion permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Conclusion"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is by no means an exhaustive comparison. But, surely, the only one that exists in the observable universe - so there you go ;)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I haven‚Äôt encountered any killer features of Mithril over Hyperdom. So, as someone who is already familiar with Hyperdom, I‚Äôd stick to it. Having said that, bar some minor issues, Mithril looks solid. Something I‚Äôd chose over React any day."}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/blog/mithril-vs-hyperdom/#automatic-redrawing\">Automatic redrawing</a></p>\n<ul>\n<li><a href=\"/blog/mithril-vs-hyperdom/#opting-out-of-autoredraw\">Opting out of Autoredraw</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/mithril-vs-hyperdom/#routing\">Routing</a></p>\n<ul>\n<li><a href=\"/blog/mithril-vs-hyperdom/#links\">Links</a></li>\n<li><a href=\"/blog/mithril-vs-hyperdom/#url-params-binding\">URL params binding</a></li>\n<li><a href=\"/blog/mithril-vs-hyperdom/#in-memory-router\">In-memory router</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/mithril-vs-hyperdom/#components-composition\">Components composition</a></li>\n<li><a href=\"/blog/mithril-vs-hyperdom/#performance\">Performance</a></li>\n<li><a href=\"/blog/mithril-vs-hyperdom/#conclusion\">Conclusion</a></li>\n</ul>","fields":{"slug":"/blog/mithril-vs-hyperdom/","readingTime":{"text":"7 min read"}},"frontmatter":{"date":"July 12, 2019","title":"Mithril vs Hyperdom","subtitles":null,"author":"Artem Avetisyan","short_description":"Frontend framework comparison","hidden":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/mithril-vs-hyperdom/","prev":{"fileAbsolutePath":"/home/artem/projects/featurist-site-2019/src/data/blog/react-hooks/index.md","fields":{"slug":"/blog/react-hooks/"},"frontmatter":{"title":"React Hooks I (finally) Understand"}},"next":{"fileAbsolutePath":"/home/artem/projects/featurist-site-2019/src/data/blog/building-documentation-website/index.md","fields":{"slug":"/blog/building-documentation-website/"},"frontmatter":{"title":"Building a documentation website"}}}}}